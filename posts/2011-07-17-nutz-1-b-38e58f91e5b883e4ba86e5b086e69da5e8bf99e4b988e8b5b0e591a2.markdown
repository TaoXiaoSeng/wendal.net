---
comments: true
date: 2011-07-17 19:17:19
layout: post
slug: nutz-1-b-38%e5%8f%91%e5%b8%83%e4%ba%86%e5%b0%86%e6%9d%a5%e8%bf%99%e4%b9%88%e8%b5%b0%e5%91%a2
title: Nutz 1.b.38发布了,将来怎么走呢?
wordpress_id: 302
categories:
- Java
tags:
- bug
- el
- io
- js
- Nutz
---

经过马拉松式的开发,在1.b.37发布之后的3个月,1.b.38终于正式发布

在我看来,这是个里程碑式的版本,截至到1.b.38,Nutz的每一部分都至少重构了一次

Ioc很久以前就重构过,大概是1.a.27,zozoh操刀
Aop,1.a.29进行重构,我操刀
Json,1.b.38历经两次重构,先是jukai,后面是我
Dao,1.b.38,被zozoh翻天覆地地重构完成

我觉得Nutz自身已经成熟了,多次重构,用户实践 -- 在不停的fix bug中完善

然而,Nutz还需要些什么呢?或者说,用户还需要些什么呢?
1. 代码生成器 -- 很多很多用户要求这个,但是,真的能提供生产效率吗??
2. IDE -- 我一直在思考其必要性,Nutz复杂到需要IDE协助吗??
3. 支持NoSQL -- 貌似没啥意义
4. 还有一些零碎的功能增强,一时半刻没想起来

我觉得Nutz还有一些设计欠佳的地方:
1. Ioc的bean定义,由于最初的设计支持一种抽象的Bean,这种bean只声明字段 -- 这种遗留的设计导致Ioc本身及IocLoader不必要的复杂性,然而我至今没发现需要用到的场景
2. Ioc的单例 -- NutIoc中的单例的概念,我依旧觉得很怪,呵呵
3. Dao的Pojo实例的生成机制 -- 新版的Dao中,这部分的代码依然有些零碎,我曾经尝试改进,没有成功, 这导致编写缓存/懒加载等需要参与对象生成的插件比较困难
4. Json反序列化的定制性 -- 1.b.38引入的JsonField注解,恩,应该得到一些改善
5. Castor的扩展机制 -- 这东西到底有没有人用过呢??


恩, Nutz,继续努力!!

**喜欢Nutz?? Fork它!!**

